name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            compiler: gcc
          - os: ubuntu-latest
            compiler: clang
          - os: macos-latest
            compiler: clang
          - os: windows-latest
            compiler: msvc

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    - name: Install Dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build libssl-dev

    - name: Install Dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install ninja openssl@3
        echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV

    - name: Install Dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install ninja openssl
        echo "OPENSSL_ROOT_DIR=C:\Program Files\OpenSSL-Win64" >> $GITHUB_ENV

    - name: Setup Unity Test Framework
      run: |
        git clone https://github.com/ThrowTheSwitch/Unity.git third_party/Unity
        
    - name: Setup cJSON
      run: |
        git clone https://github.com/DaveGamble/cJSON.git third_party/cJSON

    - name: Select GCC
      if: matrix.compiler == 'gcc'
      run: |
        echo "CC=gcc" >> $GITHUB_ENV
        echo "CXX=g++" >> $GITHUB_ENV

    - name: Select Clang
      if: matrix.compiler == 'clang'
      run: |
        echo "CC=clang" >> $GITHUB_ENV
        echo "CXX=clang++" >> $GITHUB_ENV

    - name: Configure CMake
      run: >
        cmake -B ${{github.workspace}}/build
        -G Ninja
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -DBUILD_TESTS=ON
        -DBUILD_EXAMPLES=ON
        -DENABLE_ASAN=ON

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries-${{ matrix.os }}-${{ matrix.compiler }}
        path: |
          ${{github.workspace}}/build/quant_trading
          ${{github.workspace}}/build/quant_trading.exe
          ${{github.workspace}}/build/market_client
          ${{github.workspace}}/build/market_client.exe
        if-no-files-found: ignore

  sanitizer:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v3

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build libssl-dev clang

    - name: Setup Unity Test Framework
      run: |
        git clone https://github.com/ThrowTheSwitch/Unity.git third_party/Unity
        
    - name: Setup cJSON
      run: |
        git clone https://github.com/DaveGamble/cJSON.git third_party/cJSON

    - name: Configure CMake with Sanitizers
      run: >
        cmake -B ${{github.workspace}}/build
        -G Ninja
        -DCMAKE_BUILD_TYPE=Debug
        -DCMAKE_C_COMPILER=clang
        -DBUILD_TESTS=ON
        -DENABLE_ASAN=ON

    - name: Build with Sanitizers
      run: cmake --build ${{github.workspace}}/build

    - name: Run Tests with Sanitizers
      working-directory: ${{github.workspace}}/build
      run: ctest --output-on-failure
      env:
        ASAN_OPTIONS: detect_leaks=1

  docker:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v3

    - name: Build Docker image
      run: docker build -t quant-trading .

    - name: Test Docker image
      run: |
        docker run --rm quant-trading quant_trading --version || true
        docker run --rm quant-trading market_client --version || true
