name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang]

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build libssl-dev

    - name: Setup Unity Test Framework
      run: |
        git clone https://github.com/ThrowTheSwitch/Unity.git third_party/Unity

    - name: Create Unity Config
      run: |
        mkdir -p third_party/Unity/src
        cat > third_party/Unity/src/unity_config.h << EOL
            #ifndef UNITY_CONFIG_H
            #define UNITY_CONFIG_H
            #define UNITY_INCLUDE_DOUBLE
            #define UNITY_DOUBLE_PRECISION 0.00001
            #endif // UNITY_CONFIG_H
        EOL

    - name: Setup cJSON
      run: |
        git clone https://github.com/DaveGamble/cJSON.git third_party/cJSON

    - name: Select Compiler
      run: |
        echo "CC=${{ matrix.compiler }}" >> $GITHUB_ENV
        echo "CXX=${{ matrix.compiler }}++" >> $GITHUB_ENV

    - name: Configure CMake
      working-directory: ${{ github.workspace }}
      run: |
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DBUILD_TESTS=ON \
          -DBUILD_EXAMPLES=ON \
          -DENABLE_ASAN=ON

    - name: Build
      working-directory: ${{ github.workspace }}
      run: cmake --build build --config ${{ env.BUILD_TYPE }}

    - name: Test
      working-directory: ${{ github.workspace }}/build
      run: ctest -C ${{ env.BUILD_TYPE }} --output-on-failure

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries-${{ matrix.compiler }}
        path: |
          ${{ github.workspace }}/build/quant_trading
          ${{ github.workspace }}/build/market_client
        if-no-files-found: ignore

  sanitizer:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v3

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build libssl-dev clang

    - name: Setup Unity Test Framework
      run: |
        git clone https://github.com/ThrowTheSwitch/Unity.git third_party/Unity

    - name: Create Unity Config
      run: |
        mkdir -p third_party/Unity/src
        cat > third_party/Unity/src/unity_config.h << EOL
            #ifndef UNITY_CONFIG_H
            #define UNITY_CONFIG_H
            #define UNITY_INCLUDE_DOUBLE
            #define UNITY_DOUBLE_PRECISION 0.00001
            #endif // UNITY_CONFIG_H
        EOL

    - name: Setup cJSON
      run: |
        git clone https://github.com/DaveGamble/cJSON.git third_party/cJSON

    - name: Configure CMake with Sanitizers
      run: |
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_C_COMPILER=clang \
          -DCMAKE_CXX_FLAGS="-fsanitize=address -fsanitize=leak" \
          -DBUILD_TESTS=ON \
          -DENABLE_ASAN=ON

    - name: Build with Sanitizers
      working-directory: ${{ github.workspace }}
      run: cmake --build build

    - name: Run Tests with Sanitizers
      working-directory: ${{ github.workspace }}/build
      run: ctest --output-on-failure
      env:
        ASAN_OPTIONS: detect_leaks=1

  docker:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v3

    - name: Build Docker Image
      run: docker build -t quant-trading .

    - name: Run Dockerized Tests
      run: |
        docker network create test-net
        docker run -d --rm --network=test-net --name=server quant-trading quant_trading
        docker run --rm --network=test-net quant-trading market_client quant_trading 8080
        docker network rm test-net

